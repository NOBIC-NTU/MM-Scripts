

import org.micromanager.MultiStagePosition;
import org.micromanager.PositionList;
import org.micromanager.StagePosition;

/*
 * Repopulate the Position List Manager with points from a square/rect grid.
 */

createRectGrid(int Rows,int Cols, double PitchV, double PitchH, int GridPos, int WalkOrder) {

	pl = new PositionList();
	xy = mmc.getXYStageDevice();

	PositionList pl = new PositionList();

	// current position
	xPos = mmc.getXPosition(xy);
	yPos = mmc.getYPosition(xy);
	
	// TopLeft
	double RowStart = 0.0;
	double ColStart = 0.0;
	
	if ( GridPos == 0 ) {
		// Centered
		RowStart = -(Rows-1)/2.0;
		ColStart = -(Cols-1)/2.0;
	}

	// populate pl with current list: (if wanting to append)
	// pl = mm.positions().getPositionList();
	// erase pl:
	// pl.clearAllPositions();

	// square grid, centered around current position
	int p=0;

	if (WalkOrder == 1) { // Walk Cols, then Rows
		for (int i=0; i<Rows; i++) {
			for (int j=0; j<Cols; j++) {
				MultiStagePosition msp = new MultiStagePosition();
				StagePosition s = new StagePosition();
				s.stageName = xy;
				s.numAxes = 2;
				s.x = xPos + (j + ColStart) * PitchH; // Col first
				s.y = yPos + (i + RowStart) * PitchV;
				msp.add(s);
				msp.setLabel(String.format("P%04d_X%03d_Y%03d", new Object[]{p, j, i} ));
				pl.addPosition(msp);
				p++;
			}
		}
	} else { // Walk Rows, then Cols
		for (int i=0; i<Cols; i++) {
			for (int j=0; j<Rows; j++) {
				MultiStagePosition msp = new MultiStagePosition();
				StagePosition s = new StagePosition();
				s.stageName = xy;
				s.numAxes = 2;
				s.y = yPos + (j + RowStart) * PitchV; // Row first
				s.x = xPos + (i + ColStart) * PitchH; // 
				msp.add(s);
				msp.setLabel(String.format("P%04d_X%03d_Y%03d", new Object[]{p, i, j} ));
				pl.addPosition(msp);
				p++;
			}
		}
	}
	
	// repopulate list manager
	mm.positions().setPositionList(pl);
	print(String.format("Created: %dx%d, Pitch: %fx%f", new Object[]{Rows, Cols, PitchV, PitchH} ));
}

/*
 * Build a simple form and call createSquareGrid(N,P) if valid entry.
 * <"Size NxN"> <textfield>
 * <"Pitch (um)"> <textfield>
 *
 */

import javax.swing.JFrame;

import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

public class GridToolWindow {
	
   private JFrame frame;
   private JPanel panel;
   
   public GridToolWindow(){
   	// Constructor
      prepareGUI();
   }
	
   public void showGUI(){
		frame.setVisible(true);  // Show.
   }
   private void prepareGUI(){
   	// Draw window components.
   	frame = new JFrame("Create Grid");
	
		panel = new JPanel(new BorderLayout(5, 5)); // which BorderLayout?
		panel.setBorder(new EmptyBorder(3, 3, 3, 3));
		
		JPanel label = new JPanel(new GridLayout(0, 1, 2, 2)); // which GridLayout?
		
		label.add(new JLabel("Columns x Rows", SwingConstants.RIGHT));
		label.add(new JLabel("Pitch (um)", SwingConstants.RIGHT));
		label.add(new JLabel("Reference Position", SwingConstants.RIGHT));
		label.add(new JLabel("Walk Order", SwingConstants.RIGHT));
		label.add(new JLabel("Create Grid?", SwingConstants.RIGHT));
		panel.add(label, BorderLayout.WEST);
		
		JPanel controls = new JPanel(new GridLayout(0, 2, 2, 2)); // which GridLayout?
				
		JTextField formRows = new JTextField("1");
		controls.add(formRows);
		JTextField formCols = new JTextField("1");
		controls.add(formCols);
		JTextField formPitchV = new JTextField("1000");
		controls.add(formPitchV);
		JTextField formPitchH = new JTextField("1000");
		controls.add(formPitchH);
		JRadioButton rbCentered = new JRadioButton("Centered", true);
		controls.add(rbCentered);
		JRadioButton rbTopLeft = new JRadioButton("Top-Left");
		controls.add(rbTopLeft);
		JRadioButton rbWalkColsRows = new JRadioButton("Cols, then Rows", true);
		controls.add(rbWalkColsRows);
		JRadioButton rbWalkRowsCols = new JRadioButton("Rows, then Cols");
		controls.add(rbWalkRowsCols);
		
		ButtonGroup bgGridPos = new ButtonGroup();
		bgGridPos.add(rbCentered);
		bgGridPos.add(rbTopLeft);
		ButtonGroup bgWalkOrder = new ButtonGroup();
		bgWalkOrder.add(rbWalkRowsCols);
		bgWalkOrder.add(rbWalkColsRows);
				
		int Rows=0;
		int Cols=0;
		double PitchV=0;
		double PitchH=0;
		int WalkOrder = 0;
		int GridPos = 0;
		
		// Explicit action button to overwrite current list.
		JButton showDialogButton = new JButton("Create Grid");
		showDialogButton.addActionListener(
			new ActionListener() {
				actionPerformed(ActionEvent e) {
					try { Rows = Integer.parseInt(formRows.getText());	}
					catch (NumberFormatException e) {
						JOptionPane.showMessageDialog(frame, "Rows is not integer: " + formRows.getText(), "Input error", JOptionPane.ERROR_MESSAGE);
						return;
					}
					try { Cols = Integer.parseInt(formCols.getText());	}
					catch (NumberFormatException e) {
						JOptionPane.showMessageDialog(frame, "Cols is not integer: " + formCols.getText(), "Input error", JOptionPane.ERROR_MESSAGE);
						return;
					}
					try { PitchV = Double.parseDouble(formPitchV.getText());	}
					catch (NumberFormatException e) {
						JOptionPane.showMessageDialog(frame, "PitchV is not a number (float): " + formPitchV.getText(), "Input error", JOptionPane.ERROR_MESSAGE);
						return;
					}
					try { PitchH = Double.parseDouble(formPitchH.getText());	}
					catch (NumberFormatException e) {
						JOptionPane.showMessageDialog(frame, "PitchH is not a number (float): " + formPitchH.getText(), "Input error", JOptionPane.ERROR_MESSAGE);
						return;
					}
					if (Rows * Cols > 30000 ) {
						JOptionPane.showMessageDialog(frame, "Sorry! Number of positions exceeded arbitrary limit ("+Rows*Cols+" > 30000).", "Input error", JOptionPane.WARNING_MESSAGE);
						return;
					}
					GridPos = rbTopLeft.isSelected() ? 1:0;
					WalkOrder = rbWalkColsRows.isSelected() ? 1:0;
					createRectGrid(Rows,Cols,PitchV,PitchH,GridPos,WalkOrder);
				}
			}
		);
		
		// Explicit action button to close the window
		JButton hideDialogButton = new JButton("Close");
		hideDialogButton.addActionListener(
			new ActionListener() {
				actionPerformed(ActionEvent e) {
					frame.dispose(); // close
				}
			}
		);
		
		
		controls.add(showDialogButton);
		controls.add(hideDialogButton);
		panel.add(controls, BorderLayout.CENTER);
		
		// Not a modal popup, prefer a window.
		panel.setBorder(new EmptyBorder(10, 10, 10, 10));
		frame.add(panel);
		frame.setSize(new Dimension(350, 150));
		frame.setResizable(false); // Never need to resize;
		frame.setLocationRelativeTo(null);  
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame.setVisible(true);  // Show.
	}
}

if (window instanceof GridToolWindow) {
	window.showGUI();
	print("Showing"); // Never happens?
} else {
	GridToolWindow window = new GridToolWindow();
}

